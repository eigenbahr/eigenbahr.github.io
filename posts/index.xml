<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Kevin W. Beam</title><link>https://kbeamnsidc.github.io/posts/</link><description>Recent content in Posts on Kevin W. Beam</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Jan 2022 13:45:00 -0700</lastBuildDate><atom:link href="https://kbeamnsidc.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional Programming Books, Articles, Videos</title><link>https://kbeamnsidc.github.io/posts/fp-references/</link><pubDate>Mon, 24 Jan 2022 13:45:00 -0700</pubDate><guid>https://kbeamnsidc.github.io/posts/fp-references/</guid><description>As it was done for Python, so let it be done for functional programming!
I&amp;rsquo;ve collected only the finest books, articles, videos, and other sundry links into the new Functional Programming page. As with Python, it is linked above in the navigation section.
Though some of these links are specific to JavaScript, I still think them well worth reading. Similarly, there are more than a few links to material from Scott Wlaschin on his site F# for Fun and Profit.</description></item><item><title>Python References, Tools, and Articles</title><link>https://kbeamnsidc.github.io/posts/python-references/</link><pubDate>Fri, 21 Jan 2022 10:32:46 -0700</pubDate><guid>https://kbeamnsidc.github.io/posts/python-references/</guid><description>Some time ago I developed a strategy&amp;ndash;a brain hack, more accurately&amp;ndash;to deal with my unending cursed curiosity. Instead of the 47&amp;ndash;on average&amp;ndash;browser tabs accumulating and clogging my computer&amp;rsquo;s memory, I started accumulating a pile of links. This pile was meant to collect interesting new packages, articles, tutorials, videos, and the like, and of course I would read them all later. Of course. The first derivative of my link pile had long been positive, and a close inspection of the second derivative revealed that it too showed no sign of nearing negative territory.</description></item><item><title>Using pyenv to Simplify Python Development</title><link>https://kbeamnsidc.github.io/posts/first-post/</link><pubDate>Fri, 14 Jan 2022 10:32:46 -0700</pubDate><guid>https://kbeamnsidc.github.io/posts/first-post/</guid><description>If you develop multiple Python projects each with their own version of Python, set of dependencies, and use both virtualenvs and conda, then pyenv is worth your time to investigate and learn. Check out the short demo:
To get started, install both pyenv and pyenv-virtualenv and integrate them into your shell setup. Both have good installation instructions and are easy to get up and running:
Pyenv Pyenv-virtualenv</description></item></channel></rss>